/*
  Copyright 2023 AZRAF AL MONZIM. All rights reserved.
  Use of this source code is governed by a MIT license that can be
  found in the LICENSE file.
  source: https://github.com/Monzim/flutter_bangladesh
  website: https://monzim.com
 */

import 'package:flutter/material.dart';

class DivisionalBorderPainter extends CustomPainter {
  DivisionalBorderPainter({this.strokeColor, this.strokeWidth});

  final Color? strokeColor;
  final double? strokeWidth;

  final Color _strokeColor = Colors.white;

  @override
  void paint(Canvas canvas, Size size) {
    Path path_0 = Path();
    path_0.moveTo(size.width * 0.3593976, size.height * 0.1129584);
    path_0.lineTo(size.width * 0.3546797, size.height * 0.1103799);
    path_0.lineTo(size.width * 0.3301449, size.height * 0.1126360);
    path_0.lineTo(size.width * 0.3273145, size.height * 0.1190812);
    path_0.lineTo(size.width * 0.3202309, size.height * 0.1190812);
    path_0.lineTo(size.width * 0.3155193, size.height * 0.1145696);
    path_0.lineTo(size.width * 0.2975913, size.height * 0.1126343);
    path_0.lineTo(size.width * 0.2867396, size.height * 0.1045792);
    path_0.lineTo(size.width * 0.2820213, size.height * 0.1100587);
    path_0.lineTo(size.width * 0.2706981, size.height * 0.1055465);
    path_0.lineTo(size.width * 0.2664594, size.height * 0.1097363);
    path_0.lineTo(size.width * 0.2541923, size.height * 0.1087690);
    path_0.lineTo(size.width * 0.2508899, size.height * 0.09909670);
    path_0.lineTo(size.width * 0.2400396, size.height * 0.09652112);
    path_0.lineTo(size.width * 0.2254130, size.height * 0.09458581);
    path_0.lineTo(size.width * 0.2188068, size.height * 0.09780759);
    path_0.lineTo(size.width * 0.2173923, size.height * 0.09845347);
    path_0.lineTo(size.width * 0.2093667, size.height * 0.09458581);
    path_0.lineTo(size.width * 0.2117300, size.height * 0.09233036);
    path_0.lineTo(size.width * 0.1994628, size.height * 0.08169538);
    path_0.lineTo(size.width * 0.1926894, size.height * 0.07894257);
    path_0.lineTo(size.width * 0.1871957, size.height * 0.07170198);
    path_0.lineTo(size.width * 0.1919150, size.height * 0.06267657);
    path_0.lineTo(size.width * 0.1777556, size.height * 0.05977558);
    path_0.lineTo(size.width * 0.1560541, size.height * 0.06138911);
    path_0.lineTo(size.width * 0.1485053, size.height * 0.05397888);
    path_0.lineTo(size.width * 0.1343493, size.height * 0.05655446);
    path_0.lineTo(size.width * 0.1201952, size.height * 0.04946601);

    Paint paint0Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint0Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_0, paint0Stroke);

    Path path_1 = Path();
    path_1.moveTo(size.width * 0.6969130, size.height * 0.6867030);
    path_1.lineTo(size.width * 0.6985169, size.height * 0.6680594);
    path_1.lineTo(size.width * 0.6920966, size.height * 0.6548977);
    path_1.lineTo(size.width * 0.6776473, size.height * 0.6461254);
    path_1.lineTo(size.width * 0.6888841, size.height * 0.6439340);
    path_1.lineTo(size.width * 0.6808599, size.height * 0.6351617);
    path_1.lineTo(size.width * 0.6920966, size.height * 0.6296733);
    path_1.lineTo(size.width * 0.7033333, size.height * 0.6187096);
    path_1.lineTo(size.width * 0.6969130, size.height * 0.6055479);
    path_1.lineTo(size.width * 0.6888841, size.height * 0.5836139);
    path_1.lineTo(size.width * 0.6856763, size.height * 0.5671650);
    path_1.lineTo(size.width * 0.6904879, size.height * 0.5550990);
    path_1.lineTo(size.width * 0.7081498, size.height * 0.5364587);
    path_1.lineTo(size.width * 0.7418599, size.height * 0.5276865);
    path_1.lineTo(size.width * 0.7338309, size.height * 0.5046568);
    path_1.lineTo(size.width * 0.7322271, size.height * 0.4838185);
    path_1.lineTo(size.width * 0.7434638, size.height * 0.4849142);
    path_1.lineTo(size.width * 0.7530918, size.height * 0.4772376);
    path_1.lineTo(size.width * 0.7547005, size.height * 0.4662739);
    path_1.lineTo(size.width * 0.7723575, size.height * 0.4498218);
    path_1.lineTo(size.width * 0.7707488, size.height * 0.4399538);
    path_1.lineTo(size.width * 0.7835942, size.height * 0.4322772);
    path_1.lineTo(size.width * 0.7996473, size.height * 0.4377591);
    path_1.lineTo(size.width * 0.8253285, size.height * 0.4344719);
    path_1.lineTo(size.width * 0.8349565, size.height * 0.4246040);
    path_1.lineTo(size.width * 0.8445894, size.height * 0.4070561);
    path_1.lineTo(size.width * 0.8542174, size.height * 0.4070561);
    path_1.lineTo(size.width * 0.8461884, size.height * 0.3982805);
    path_1.lineTo(size.width * 0.8590290, size.height * 0.3862178);
    path_1.lineTo(size.width * 0.8750821, size.height * 0.3840264);
    path_1.lineTo(size.width * 0.8750821, size.height * 0.3785413);
    path_1.lineTo(size.width * 0.8815024, size.height * 0.3741551);
    path_1.lineTo(size.width * 0.8815024, size.height * 0.3653795);
    path_1.lineTo(size.width * 0.8718792, size.height * 0.3631881);
    path_1.lineTo(size.width * 0.8606425, size.height * 0.3533201);
    path_1.lineTo(size.width * 0.8782995, size.height * 0.3412574);
    path_1.lineTo(size.width * 0.8943527, size.height * 0.3434488);
    path_1.lineTo(size.width * 0.9023768, size.height * 0.3346733);
    path_1.lineTo(size.width * 0.9328792, size.height * 0.3313861);
    path_1.lineTo(size.width * 0.9344879, size.height * 0.3313861);

    Paint paint1Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint1Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_1, paint1Stroke);

    Path path_2 = Path();
    path_2.moveTo(size.width * 0.4639435, size.height * 0.7152640);
    path_2.lineTo(size.width * 0.4673440, size.height * 0.7059571);
    path_2.lineTo(size.width * 0.4900435, size.height * 0.7075083);
    path_2.lineTo(size.width * 0.4991256, size.height * 0.6997525);
    path_2.lineTo(size.width * 0.4979903, size.height * 0.6912244);
    path_2.lineTo(size.width * 0.5116087, size.height * 0.6819175);
    path_2.lineTo(size.width * 0.5138792, size.height * 0.6733927);
    path_2.lineTo(size.width * 0.5275024, size.height * 0.6710660);
    path_2.lineTo(size.width * 0.5286425, size.height * 0.6656370);
    path_2.lineTo(size.width * 0.5411208, size.height * 0.6656370);
    path_2.lineTo(size.width * 0.5399855, size.height * 0.6555578);
    path_2.lineTo(size.width * 0.5592802, size.height * 0.6547822);
    path_2.lineTo(size.width * 0.5672271, size.height * 0.6493531);
    path_2.lineTo(size.width * 0.5729034, size.height * 0.6516799);
    path_2.lineTo(size.width * 0.5694976, size.height * 0.6741683);
    path_2.lineTo(size.width * 0.5899372, size.height * 0.6795941);
    path_2.lineTo(size.width * 0.6092319, size.height * 0.6757162);
    path_2.lineTo(size.width * 0.6171787, size.height * 0.6819175);
    path_2.lineTo(size.width * 0.6228551, size.height * 0.6718383);
    path_2.lineTo(size.width * 0.6432850, size.height * 0.6664092);
    path_2.lineTo(size.width * 0.6591836, size.height * 0.6695116);
    path_2.lineTo(size.width * 0.6750725, size.height * 0.6757162);
    path_2.lineTo(size.width * 0.6932319, size.height * 0.6857987);
    path_2.lineTo(size.width * 0.7136667, size.height * 0.6912244);
    path_2.lineTo(size.width * 0.7329710, size.height * 0.6974257);
    path_2.lineTo(size.width * 0.7420483, size.height * 0.7036304);
    path_2.lineTo(size.width * 0.7499903, size.height * 0.7160363);
    path_2.lineTo(size.width * 0.7624734, size.height * 0.7330990);
    path_2.lineTo(size.width * 0.7681498, size.height * 0.7509340);
    path_2.lineTo(size.width * 0.7783671, size.height * 0.7741980);
    path_2.lineTo(size.width * 0.7908502, size.height * 0.7858284);
    path_2.lineTo(size.width * 0.8078792, size.height * 0.7990099);
    path_2.lineTo(size.width * 0.8237681, size.height * 0.8137426);
    path_2.lineTo(size.width * 0.8214976, size.height * 0.8261518);
    path_2.lineTo(size.width * 0.8464686, size.height * 0.8432112);
    path_2.lineTo(size.width * 0.8600918, size.height * 0.8540693);
    path_2.lineTo(size.width * 0.8600918, size.height * 0.8649307);
    path_2.lineTo(size.width * 0.8487391, size.height * 0.8773366);
    path_2.lineTo(size.width * 0.8476039, size.height * 0.8897426);
    path_2.lineTo(size.width * 0.8476039, size.height * 0.9184356);
    path_2.lineTo(size.width * 0.8510048, size.height * 0.9347195);

    Paint paint2Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint2Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_2, paint2Stroke);

    Path path_3 = Path();
    path_3.moveTo(size.width * 0.2403319, size.height * 0.4267954);
    path_3.lineTo(size.width * 0.2426019, size.height * 0.4516106);
    path_3.lineTo(size.width * 0.2448729, size.height * 0.4562640);
    path_3.lineTo(size.width * 0.2289773, size.height * 0.4640198);
    path_3.lineTo(size.width * 0.2335169, size.height * 0.4717756);
    path_3.lineTo(size.width * 0.2570691, size.height * 0.4871122);
    path_3.lineTo(size.width * 0.2747290, size.height * 0.4827261);
    path_3.lineTo(size.width * 0.2811551, size.height * 0.4882112);
    path_3.lineTo(size.width * 0.2955990, size.height * 0.4980792);
    path_3.lineTo(size.width * 0.3020198, size.height * 0.5167228);
    path_3.lineTo(size.width * 0.3164676, size.height * 0.5265875);
    path_3.lineTo(size.width * 0.3100473, size.height * 0.5276865);
    path_3.lineTo(size.width * 0.3036256, size.height * 0.5298779);
    path_3.lineTo(size.width * 0.3036256, size.height * 0.5353630);
    path_3.lineTo(size.width * 0.3244874, size.height * 0.5353630);
    path_3.lineTo(size.width * 0.3405391, size.height * 0.5441386);
    path_3.lineTo(size.width * 0.3421473, size.height * 0.5551056);
    path_3.lineTo(size.width * 0.3549942, size.height * 0.5693597);
    path_3.lineTo(size.width * 0.3437575, size.height * 0.5649703);
    path_3.lineTo(size.width * 0.3373333, size.height * 0.5693597);
    path_3.lineTo(size.width * 0.3453623, size.height * 0.5748449);
    path_3.lineTo(size.width * 0.3421551, size.height * 0.5869076);
    path_3.lineTo(size.width * 0.3469676, size.height * 0.5967756);
    path_3.lineTo(size.width * 0.3614150, size.height * 0.5967756);
    path_3.lineTo(size.width * 0.3501783, size.height * 0.6022607);
    path_3.lineTo(size.width * 0.3533850, size.height * 0.6110363);
    path_3.lineTo(size.width * 0.3678290, size.height * 0.6088449);
    path_3.lineTo(size.width * 0.3774609, size.height * 0.6143300);
    path_3.lineTo(size.width * 0.3758483, size.height * 0.6252970);
    path_3.lineTo(size.width * 0.3886976, size.height * 0.6198119);
    path_3.lineTo(size.width * 0.4015391, size.height * 0.6231023);
    path_3.lineTo(size.width * 0.3886976, size.height * 0.6428416);
    path_3.lineTo(size.width * 0.3758498, size.height * 0.6428416);
    path_3.lineTo(size.width * 0.3935092, size.height * 0.6560033);
    path_3.lineTo(size.width * 0.4015391, size.height * 0.6680660);
    path_3.lineTo(size.width * 0.4208058, size.height * 0.6746436);
    path_3.lineTo(size.width * 0.4143816, size.height * 0.6878053);
    path_3.lineTo(size.width * 0.4288285, size.height * 0.6932904);
    path_3.lineTo(size.width * 0.4224082, size.height * 0.6998713);
    path_3.lineTo(size.width * 0.4256150, size.height * 0.7086436);
    path_3.lineTo(size.width * 0.4352459, size.height * 0.7141287);
    path_3.lineTo(size.width * 0.4529048, size.height * 0.7086436);
    path_3.lineTo(size.width * 0.4641415, size.height * 0.7152244);
    path_3.lineTo(size.width * 0.4657483, size.height * 0.7382541);
    path_3.lineTo(size.width * 0.4432749, size.height * 0.7415413);
    path_3.lineTo(size.width * 0.4432749, size.height * 0.7536040);
    path_3.lineTo(size.width * 0.4577198, size.height * 0.7536040);
    path_3.lineTo(size.width * 0.4705623, size.height * 0.7579901);
    path_3.lineTo(size.width * 0.4689565, size.height * 0.7700528);
    path_3.lineTo(size.width * 0.4769850, size.height * 0.7854059);
    path_3.lineTo(size.width * 0.4705623, size.height * 0.7930825);
    path_3.lineTo(size.width * 0.4769850, size.height * 0.8128251);
    path_3.lineTo(size.width * 0.4577198, size.height * 0.8007591);
    path_3.lineTo(size.width * 0.4464826, size.height * 0.7963729);
    path_3.lineTo(size.width * 0.4512990, size.height * 0.8062409);
    path_3.lineTo(size.width * 0.4657425, size.height * 0.8161089);
    path_3.lineTo(size.width * 0.4721633, size.height * 0.8204950);
    path_3.lineTo(size.width * 0.4641348, size.height * 0.8204950);
    path_3.lineTo(size.width * 0.4528981, size.height * 0.8292706);
    path_3.lineTo(size.width * 0.4528981, size.height * 0.8424323);
    path_3.lineTo(size.width * 0.4384541, size.height * 0.8610759);
    path_3.lineTo(size.width * 0.4320333, size.height * 0.8797195);
    path_3.lineTo(size.width * 0.4432700, size.height * 0.8906832);
    path_3.lineTo(size.width * 0.4480831, size.height * 0.9093267);
    path_3.lineTo(size.width * 0.4352406, size.height * 0.9246799);
    path_3.lineTo(size.width * 0.4432700, size.height * 0.9367426);
    path_3.lineTo(size.width * 0.4368464, size.height * 0.9542871);
    path_3.lineTo(size.width * 0.4464773, size.height * 0.9652541);
    path_3.lineTo(size.width * 0.4448705, size.height * 0.9729307);
    path_3.lineTo(size.width * 0.4480773, size.height * 0.9959604);
    path_3.lineTo(size.width * 0.4480773, size.height * 0.9970594);

    Paint paint3Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint3Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_3, paint3Stroke);

    Path path_4 = Path();
    path_4.moveTo(size.width * 0.4224145, size.height * 0.01664459);
    path_4.lineTo(size.width * 0.4063618, size.height * 0.007871749);
    path_4.lineTo(size.width * 0.4031517, size.height * 0.01445059);
    path_4.lineTo(size.width * 0.4111812, size.height * 0.01883855);
    path_4.lineTo(size.width * 0.3967343, size.height * 0.02322495);
    path_4.lineTo(size.width * 0.3967343, size.height * 0.04076997);
    path_4.lineTo(size.width * 0.4063643, size.height * 0.04954488);
    path_4.lineTo(size.width * 0.4079700, size.height * 0.05722145);
    path_4.lineTo(size.width * 0.3999435, size.height * 0.06599505);
    path_4.lineTo(size.width * 0.3903111, size.height * 0.06489802);
    path_4.lineTo(size.width * 0.3806792, size.height * 0.07038152);
    path_4.lineTo(size.width * 0.3790734, size.height * 0.08025050);
    path_4.lineTo(size.width * 0.3614159, size.height * 0.09779703);
    path_4.lineTo(size.width * 0.3662319, size.height * 0.1065700);
    path_4.lineTo(size.width * 0.3598101, size.height * 0.1131502);
    path_4.lineTo(size.width * 0.3678367, size.height * 0.1186350);
    path_4.lineTo(size.width * 0.3598101, size.height * 0.1230215);
    path_4.lineTo(size.width * 0.3678367, size.height * 0.1241215);
    path_4.lineTo(size.width * 0.3678367, size.height * 0.1296066);
    path_4.lineTo(size.width * 0.3614159, size.height * 0.1350891);
    path_4.lineTo(size.width * 0.3678367, size.height * 0.1394779);
    path_4.lineTo(size.width * 0.3694425, size.height * 0.1449614);
    path_4.lineTo(size.width * 0.3758710, size.height * 0.1559281);
    path_4.lineTo(size.width * 0.3694425, size.height * 0.1570267);
    path_4.lineTo(size.width * 0.3694425, size.height * 0.1679911);
    path_4.lineTo(size.width * 0.3774720, size.height * 0.1756677);
    path_4.lineTo(size.width * 0.3919159, size.height * 0.1745713);
    path_4.lineTo(size.width * 0.3919159, size.height * 0.1811512);
    path_4.lineTo(size.width * 0.3887087, size.height * 0.1844373);
    path_4.lineTo(size.width * 0.3935237, size.height * 0.1899231);
    path_4.lineTo(size.width * 0.3967309, size.height * 0.1855366);
    path_4.lineTo(size.width * 0.4159976, size.height * 0.1932132);
    path_4.lineTo(size.width * 0.4143850, size.height * 0.1986967);
    path_4.lineTo(size.width * 0.4063585, size.height * 0.1997944);
    path_4.lineTo(size.width * 0.4143850, size.height * 0.2085696);
    path_4.lineTo(size.width * 0.4127792, size.height * 0.2217294);
    path_4.lineTo(size.width * 0.4111734, size.height * 0.2305063);
    path_4.lineTo(size.width * 0.4031435, size.height * 0.2294063);
    path_4.lineTo(size.width * 0.4095676, size.height * 0.2381828);
    path_4.lineTo(size.width * 0.4063609, size.height * 0.2447594);
    path_4.lineTo(size.width * 0.4031502, size.height * 0.2491482);
    path_4.lineTo(size.width * 0.3967295, size.height * 0.2491482);
    path_4.lineTo(size.width * 0.3887024, size.height * 0.2524360);
    path_4.lineTo(size.width * 0.3951242, size.height * 0.2612119);
    path_4.lineTo(size.width * 0.3951242, size.height * 0.2710792);
    path_4.lineTo(size.width * 0.3822802, size.height * 0.2809485);
    path_4.lineTo(size.width * 0.3983300, size.height * 0.2897221);
    path_4.lineTo(size.width * 0.4015367, size.height * 0.2952076);
    path_4.lineTo(size.width * 0.3935072, size.height * 0.2995957);
    path_4.lineTo(size.width * 0.4111710, size.height * 0.3160465);
    path_4.lineTo(size.width * 0.4111710, size.height * 0.3292066);
    path_4.lineTo(size.width * 0.4079618, size.height * 0.3423696);
    path_4.lineTo(size.width * 0.4127768, size.height * 0.3500462);
    path_4.lineTo(size.width * 0.4063560, size.height * 0.3533333);
    path_4.lineTo(size.width * 0.4191986, size.height * 0.3599109);
    path_4.lineTo(size.width * 0.4224077, size.height * 0.3708779);
    path_4.lineTo(size.width * 0.4224077, size.height * 0.3818449);
    path_4.lineTo(size.width * 0.4127768, size.height * 0.3917096);
    path_4.lineTo(size.width * 0.3838826, size.height * 0.3960990);
    path_4.lineTo(size.width * 0.3710367, size.height * 0.3950000);
    path_4.lineTo(size.width * 0.3662242, size.height * 0.4037756);
    path_4.lineTo(size.width * 0.3614092, size.height * 0.4147426);
    path_4.lineTo(size.width * 0.3742517, size.height * 0.4202277);
    path_4.lineTo(size.width * 0.3806725, size.height * 0.4180363);
    path_4.lineTo(size.width * 0.3887024, size.height * 0.4279043);
    path_4.lineTo(size.width * 0.3822816, size.height * 0.4290000);
    path_4.lineTo(size.width * 0.3710449, size.height * 0.4224257);
    path_4.lineTo(size.width * 0.3710449, size.height * 0.4301023);
    path_4.lineTo(size.width * 0.3919058, size.height * 0.4344884);
    path_4.lineTo(size.width * 0.4047551, size.height * 0.4399736);
    path_4.lineTo(size.width * 0.3838850, size.height * 0.4454587);
    path_4.lineTo(size.width * 0.3678324, size.height * 0.4443564);
    path_4.lineTo(size.width * 0.3469643, size.height * 0.4388713);
    path_4.lineTo(size.width * 0.3180700, size.height * 0.4465512);
    path_4.lineTo(size.width * 0.2827541, size.height * 0.4333894);
    path_4.lineTo(size.width * 0.2763324, size.height * 0.4224224);
    path_4.lineTo(size.width * 0.2570657, size.height * 0.4070693);
    path_4.lineTo(size.width * 0.2602783, size.height * 0.4202310);
    path_4.lineTo(size.width * 0.2522483, size.height * 0.4246172);
    path_4.lineTo(size.width * 0.2522483, size.height * 0.4257162);
    path_4.lineTo(size.width * 0.2345879, size.height * 0.4246172);
    path_4.lineTo(size.width * 0.2297749, size.height * 0.4191320);
    path_4.lineTo(size.width * 0.2105097, size.height * 0.4015875);
    path_4.lineTo(size.width * 0.1864304, size.height * 0.4026865);
    path_4.lineTo(size.width * 0.1784029, size.height * 0.3972013);
    path_4.lineTo(size.width * 0.1559295, size.height * 0.3983003);
    path_4.lineTo(size.width * 0.1430879, size.height * 0.4026898);
    path_4.lineTo(size.width * 0.1430879, size.height * 0.4015875);
    path_4.lineTo(size.width * 0.1382720, size.height * 0.3961023);
    path_4.lineTo(size.width * 0.1302454, size.height * 0.3961023);
    path_4.lineTo(size.width * 0.1238246, size.height * 0.3884257);
    path_4.lineTo(size.width * 0.1270338, size.height * 0.3763630);
    path_4.lineTo(size.width * 0.1174019, size.height * 0.3686865);
    path_4.lineTo(size.width * 0.09975121, size.height * 0.3686865);
    path_4.lineTo(size.width * 0.08851449, size.height * 0.3621089);
    path_4.lineTo(size.width * 0.08209372, size.height * 0.3686865);
    path_4.lineTo(size.width * 0.06604058, size.height * 0.3664950);
    path_4.lineTo(size.width * 0.04838309, size.height * 0.3675941);
    path_4.lineTo(size.width * 0.01788338, size.height * 0.3511419);
    path_4.lineTo(size.width * 0.003436285, size.height * 0.3500429);

    Paint paint4Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint4Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_4, paint4Stroke);

    Path path_5 = Path();
    path_5.moveTo(size.width * 0.8542271, size.height * 0.07805809);
    path_5.lineTo(size.width * 0.8542271, size.height * 0.09889703);
    path_5.lineTo(size.width * 0.8638502, size.height * 0.1032858);
    path_5.lineTo(size.width * 0.8494106, size.height * 0.1032858);
    path_5.lineTo(size.width * 0.8445942, size.height * 0.1076713);
    path_5.lineTo(size.width * 0.8590386, size.height * 0.1109617);
    path_5.lineTo(size.width * 0.8526135, size.height * 0.1153479);
    path_5.lineTo(size.width * 0.8494106, size.height * 0.1263149);
    path_5.lineTo(size.width * 0.8574348, size.height * 0.1339914);
    path_5.lineTo(size.width * 0.8558309, size.height * 0.1460545);
    path_5.lineTo(size.width * 0.8783043, size.height * 0.1493446);
    path_5.lineTo(size.width * 0.8847246, size.height * 0.1581188);
    path_5.lineTo(size.width * 0.9071981, size.height * 0.1603099);
    path_5.lineTo(size.width * 0.9184348, size.height * 0.1679865);
    path_5.lineTo(size.width * 0.9168309, size.height * 0.1745660);
    path_5.lineTo(size.width * 0.9216425, size.height * 0.1822426);
    path_5.lineTo(size.width * 0.9328792, size.height * 0.1734660);
    path_5.lineTo(size.width * 0.9425072, size.height * 0.1800449);
    path_5.lineTo(size.width * 0.9425072, size.height * 0.1866238);
    path_5.lineTo(size.width * 0.9312705, size.height * 0.1888145);
    path_5.lineTo(size.width * 0.9264589, size.height * 0.1997805);
    path_5.lineTo(size.width * 0.9457246, size.height * 0.2052647);
    path_5.lineTo(size.width * 0.9601691, size.height * 0.2085541);
    path_5.lineTo(size.width * 0.9649807, size.height * 0.2173300);
    path_5.lineTo(size.width * 0.9473188, size.height * 0.2271977);
    path_5.lineTo(size.width * 0.9473188, size.height * 0.2403601);
    path_5.lineTo(size.width * 0.9585556, size.height * 0.2480366);
    path_5.lineTo(size.width * 0.9505314, size.height * 0.2611987);
    path_5.lineTo(size.width * 0.9312657, size.height * 0.2677769);
    path_5.lineTo(size.width * 0.9360821, size.height * 0.2710663);
    path_5.lineTo(size.width * 0.9489227, size.height * 0.2677769);
    path_5.lineTo(size.width * 0.9569565, size.height * 0.2721647);
    path_5.lineTo(size.width * 0.9585604, size.height * 0.2787429);
    path_5.lineTo(size.width * 0.9521401, size.height * 0.2831300);
    path_5.lineTo(size.width * 0.9633768, size.height * 0.2962924);
    path_5.lineTo(size.width * 0.9633768, size.height * 0.2995818);
    path_5.lineTo(size.width * 0.9521401, size.height * 0.3006795);
    path_5.lineTo(size.width * 0.9585604, size.height * 0.3061653);
    path_5.lineTo(size.width * 0.9585604, size.height * 0.3127432);
    path_5.lineTo(size.width * 0.9489324, size.height * 0.3160337);
    path_5.lineTo(size.width * 0.9328841, size.height * 0.3138419);
    path_5.lineTo(size.width * 0.9280676, size.height * 0.3193274);
    path_5.lineTo(size.width * 0.9376957, size.height * 0.3226162);
    path_5.lineTo(size.width * 0.9393043, size.height * 0.3270043);
    path_5.lineTo(size.width * 0.9296715, size.height * 0.3324884);
    path_5.lineTo(size.width * 0.9457246, size.height * 0.3335875);
    path_5.lineTo(size.width * 0.9617778, size.height * 0.3390726);
    path_5.lineTo(size.width * 0.9746184, size.height * 0.3292059);
    path_5.lineTo(size.width * 0.9922802, size.height * 0.3270149);
    path_5.lineTo(size.width * 0.9906715, size.height * 0.3346931);
    path_5.lineTo(size.width * 0.9746184, size.height * 0.3412673);
    path_5.lineTo(size.width * 0.9858551, size.height * 0.3489439);
    path_5.lineTo(size.width * 0.9842512, size.height * 0.3533333);
    path_5.lineTo(size.width * 0.9698068, size.height * 0.3500462);
    path_5.lineTo(size.width * 0.9665990, size.height * 0.3599109);
    path_5.lineTo(size.width * 0.9794396, size.height * 0.3653993);
    path_5.lineTo(size.width * 0.9665990, size.height * 0.3675875);
    path_5.lineTo(size.width * 0.9698068, size.height * 0.3763630);
    path_5.lineTo(size.width * 0.9730145, size.height * 0.3829406);
    path_5.lineTo(size.width * 0.9826473, size.height * 0.3873300);
    path_5.lineTo(size.width * 0.9762174, size.height * 0.3950066);
    path_5.lineTo(size.width * 0.9778309, size.height * 0.4004917);
    path_5.lineTo(size.width * 0.9778309, size.height * 0.4015875);

    Paint paint5Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint5Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_5, paint5Stroke);

    Path path_6 = Path();
    path_6.moveTo(size.width * 0.4066633, size.height * 0.2444043);
    path_6.lineTo(size.width * 0.4082599, size.height * 0.2442898);
    path_6.lineTo(size.width * 0.4160773, size.height * 0.2426211);
    path_6.lineTo(size.width * 0.4211560, size.height * 0.2458746);
    path_6.lineTo(size.width * 0.4284024, size.height * 0.2343234);
    path_6.lineTo(size.width * 0.4371981, size.height * 0.2269673);
    path_6.lineTo(size.width * 0.4468599, size.height * 0.2194719);
    path_6.lineTo(size.width * 0.4516908, size.height * 0.2161716);
    path_6.lineTo(size.width * 0.4444444, size.height * 0.2029703);
    path_6.lineTo(size.width * 0.4492754, size.height * 0.1996700);
    path_6.lineTo(size.width * 0.4613527, size.height * 0.1947195);
    path_6.lineTo(size.width * 0.4637681, size.height * 0.1881188);
    path_6.lineTo(size.width * 0.4734300, size.height * 0.1914191);
    path_6.lineTo(size.width * 0.4855072, size.height * 0.2029703);
    path_6.lineTo(size.width * 0.4975845, size.height * 0.1914191);
    path_6.lineTo(size.width * 0.5023043, size.height * 0.1864686);
    path_6.lineTo(size.width * 0.5144928, size.height * 0.1831683);
    path_6.lineTo(size.width * 0.5241546, size.height * 0.1831683);
    path_6.lineTo(size.width * 0.5265700, size.height * 0.1947195);
    path_6.lineTo(size.width * 0.5410628, size.height * 0.1930693);
    path_6.lineTo(size.width * 0.5386473, size.height * 0.2095710);
    path_6.lineTo(size.width * 0.5458937, size.height * 0.2161716);
    path_6.lineTo(size.width * 0.5507246, size.height * 0.2211221);
    path_6.lineTo(size.width * 0.5507246, size.height * 0.2277228);
    path_6.lineTo(size.width * 0.5458937, size.height * 0.2326733);
    path_6.lineTo(size.width * 0.5410628, size.height * 0.2392739);
    path_6.lineTo(size.width * 0.5507246, size.height * 0.2541254);
    path_6.lineTo(size.width * 0.5676329, size.height * 0.2590759);
    path_6.lineTo(size.width * 0.5845411, size.height * 0.2656766);
    path_6.lineTo(size.width * 0.5724638, size.height * 0.2689769);
    path_6.lineTo(size.width * 0.5700483, size.height * 0.2739274);
    path_6.lineTo(size.width * 0.5845411, size.height * 0.2904290);
    path_6.lineTo(size.width * 0.5845411, size.height * 0.2986799);
    path_6.lineTo(size.width * 0.5797101, size.height * 0.3036304);
    path_6.lineTo(size.width * 0.5917874, size.height * 0.3184818);
    path_6.lineTo(size.width * 0.6086957, size.height * 0.3234323);
    path_6.lineTo(size.width * 0.6256039, size.height * 0.3201320);
    path_6.lineTo(size.width * 0.6328502, size.height * 0.3135314);
    path_6.lineTo(size.width * 0.6400966, size.height * 0.3201320);
    path_6.lineTo(size.width * 0.6473430, size.height * 0.3201320);
    path_6.lineTo(size.width * 0.6545894, size.height * 0.3234323);
    path_6.lineTo(size.width * 0.6594203, size.height * 0.3052805);
    path_6.lineTo(size.width * 0.6739130, size.height * 0.3069307);
    path_6.lineTo(size.width * 0.6763285, size.height * 0.3102310);
    path_6.lineTo(size.width * 0.6956522, size.height * 0.3151815);
    path_6.lineTo(size.width * 0.6956522, size.height * 0.3201320);
    path_6.lineTo(size.width * 0.7053140, size.height * 0.3267327);
    path_6.lineTo(size.width * 0.7198068, size.height * 0.3267327);
    path_6.lineTo(size.width * 0.7318841, size.height * 0.3234323);
    path_6.lineTo(size.width * 0.7405266, size.height * 0.3201320);
    path_6.lineTo(size.width * 0.7340580, size.height * 0.3052805);
    path_6.lineTo(size.width * 0.7405266, size.height * 0.2953795);
    path_6.lineTo(size.width * 0.7367150, size.height * 0.2805281);
    path_6.lineTo(size.width * 0.7159082, size.height * 0.2739274);
    path_6.lineTo(size.width * 0.7159082, size.height * 0.2656766);
    path_6.lineTo(size.width * 0.7254879, size.height * 0.2623762);
    path_6.lineTo(size.width * 0.7367150, size.height * 0.2689769);
    path_6.lineTo(size.width * 0.7505266, size.height * 0.2689769);
    path_6.lineTo(size.width * 0.7608696, size.height * 0.2574257);
    path_6.lineTo(size.width * 0.7681159, size.height * 0.2656766);
    path_6.lineTo(size.width * 0.7777778, size.height * 0.2557756);
    path_6.lineTo(size.width * 0.7898551, size.height * 0.2623762);
    path_6.lineTo(size.width * 0.8091787, size.height * 0.2475248);
    path_6.lineTo(size.width * 0.8236715, size.height * 0.2392739);
    path_6.lineTo(size.width * 0.8429952, size.height * 0.2359736);
    path_6.lineTo(size.width * 0.8719807, size.height * 0.2359736);
    path_6.lineTo(size.width * 0.8864734, size.height * 0.2310231);
    path_6.lineTo(size.width * 0.9033816, size.height * 0.2343234);
    path_6.lineTo(size.width * 0.9057971, size.height * 0.2409241);
    path_6.lineTo(size.width * 0.9275362, size.height * 0.2310231);
    path_6.lineTo(size.width * 0.9420290, size.height * 0.2293729);
    path_6.lineTo(size.width * 0.9468599, size.height * 0.2293729);

    Paint paint6Stroke = Paint()
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth ?? size.width * 0.009099420;
    paint6Stroke.color = strokeColor ?? _strokeColor;
    canvas.drawPath(path_6, paint6Stroke);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}
